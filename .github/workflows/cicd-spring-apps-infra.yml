name: cicd-spring-apps-infra

on:
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'api/**'
  # example tags: { "CostCenter": "DEV", "Department": "RESEARCH", "DeleteNightly": "true", "DeleteWeekly": "true" }
  workflow_dispatch:
    inputs:
      run_cleanup:
        type: boolean
        description: Delete all existing resources first

jobs:
  cleanup_if_requested:
    runs-on: ubuntu-latest
    environment: SPRING-APPS
    steps:
      - name: Azure login
        if: github.event.inputs.run_cleanup == 'true'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        if: github.event.inputs.run_cleanup == 'true'
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check the resource group exists
        if: github.event.inputs.run_cleanup == 'true'
        id: check_next_steps
        run: |
          RG_EXISTS=$(az group exists --name ${{ secrets.AZURE_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }})
          echo "::set-output name=DELETE_RG::${RG_EXISTS}"

      - name: Remove deployed resource group (if exists)
        if: steps.check_next_steps.outputs.DELETE_RG == 'true'
        run: |
          echo "${{ steps.check_next_steps.outputs.DELETE_RG }}"
          az group delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --yes

  deploy_log_analytics_if_needed:
    # Having this as a separte Job, as there are many situations where Log Analytics
    # workspace would be outside of the current subscription
    needs: [cleanup_if_requested]
    runs-on: ubuntu-latest
    environment: SPRING-APPS
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check the resource group exists
        id: logs_rg_exists
        run: |
          LOGS_RG_EXISTS=$(az group exists --name ${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }})
          echo "::set-output name=LOGS_RG_EXISTS::${LOGS_RG_EXISTS}"

      - name: Create Logs Workspace Azure resource group
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment sub create \
           --location ${{ secrets.AZURE_LOCATION }} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }} location=${{ secrets.AZURE_LOCATION }} resourceTags="${{ secrets.AZURE_RESOURCE_TAGS }}"

      - name: Deploy Log Workspace
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment group create --resource-group ${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }} --template-file ./templates/components/logs.bicep \
                        --parameters location=${{ secrets.AZURE_LOCATION }}  \
                                     logAnalyticsWorkspaceName=${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME }}

  deploy_infra:
    needs: [deploy_log_analytics_if_needed]
    runs-on: ubuntu-latest
    environment: SPRING-APPS
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3


      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Purge deleted KV if found
        run: |
          kvDeletedQuery="[?name == '${{secrets.AZURE_KEY_VAULT_NAME}}'].id"
          kvDeletedExists=`az keyvault list-deleted --query "$kvDeletedQuery" -o tsv`
          if [[ ! -z "$kvDeletedExists" ]]; then
            echo "Deleted KeyVault exists, purging it and waiting for 10 mins"
            az keyvault purge -l ${{secrets.AZURE_LOCATION}} -n ${{secrets.AZURE_KEY_VAULT_NAME}}
          fi
      
      - name: Create Azure resource group
        run: |
          az deployment sub create \
           --location ${{ secrets.AZURE_LOCATION }} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{ secrets.AZURE_RESOURCE_GROUP }} location=${{ secrets.AZURE_LOCATION }} resourceTags="${{ secrets.AZURE_RESOURCE_TAGS }}"

      - name: Initialize deployment variables
        id: vars
        run: |
          clientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
          echo "::set-output name=DEPLOYMENT_CLIENT_IP::${clientIP}"
          echo "Client IP: $clientIP"

          dbAdminPassword="`openssl rand -hex 25`#@"
          echo "::add-mask::$dbAdminPassword"
          echo "::set-output name=DB_ADMIN_PASSWORD::${dbAdminPassword}"

          createDB=true
          dbAdminName=`az postgres server list --query "[?fullyQualifiedDomainName == '${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com'].administratorLogin" -o tsv`
          
          if [[ -z "$dbAdminName" ]]; then
            echo "This is a new deployment, generating a new admin name"
            dbAdminName="a`openssl rand -hex 5`"
          else
            #echo "Re-setting password for an existing admin user"
            #az postgres server update --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_DB_SERVER_NAME }} --admin-password $dbAdminPassword
            createDB=false
          fi
          echo "Admin name: $dbAdminName"
          echo "Admin password: $dbAdminPassword"
          
          echo "::set-output name=DB_ADMIN_NAME::${dbAdminName}"
          echo "::set-output name=DB_NOT_INITIALIZED::${createDB}"
          echo "Create DB: $createDB"

          dbAppUserName=`echo "${{ secrets.AZURE_APP_NAME }}" | tr '-' '_'`;
          echo "::set-output name=DB_APP_USER_NAME::${dbAppUserName}"
          echo "App user name: $dbAppUserName"

          dbAppUserPassword=""
          if [[ -z "${{secrets.AZURE_DBA_GROUP_NAME}}" ]]; then
            echo "New app user password generated"
            dbAppUserPassword="`openssl rand -hex 25`#@"
            echo "::add-mask::$dbAppUserPassword"
            echo "::set-output name=DB_APP_USER_PASSWORD::${dbAppUserPassword}"
            appSpringProfile="test"
          else
            dbaGroupId=`az ad group show --group "All TEST PGSQL Admins" --query '[id]' -o tsv`
            echo "DBA Group Id: $dbaGroupId"
            echo "::set-output name=AZURE_DBA_GROUP_ID::${dbaGroupId}"
            echo "::set-output name=DB_APP_USER_PASSWORD::not_uset_with_managed_identities"
            appSpringProfile="test-mi"
          fi
          echo "App user password: $dbAppUserPassword"

          echo "::set-output name=APP_SPRING_PROFILE::$appSpringProfile"
          echo "App Spring profile: $appSpringProfile"
          
          if [[ ! -z "${{secrets.AZURE_DBA_GROUP_NAME}}" ]]; then
             echo "::set-output name=DB_AAD_INTEGRATION::true"
          else
            echo "::set-output name=DB_AAD_INTEGRATION::false"
          fi
          
          export containerImageName=`az container show -g ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_CONTAINER_INSTANCE_NAME }} --query "[containers[0]]|[*].image" -o tsv`
          if [[ -z "$containerImageName" ]]; then
            export containerImageName="mcr.microsoft.com/azuredocs/aci-helloworld:latest"
            echo "::set-output name=FIRST_DEPLOYMENT::true"
          else
            echo "::set-output name=FIRST_DEPLOYMENT::false"
          fi
          echo "::set-output name=CONTAINER_NAME::$containerImageName"
          echo "App Spring profile: $containerImageName"

      - name: Deploy Azure resources test
        run: |
          cd ./templates
          az bicep build --file ./spring-apps.bicep

          echo "secrets.AZURE_RESOURCE_GROUP: ${{secrets.AZURE_RESOURCE_GROUP}}"> temp.txt
          echo "secrets.AZURE_LOCATION: ${{secrets.AZURE_LOCATION}}">> temp.txt
          echo "secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME: ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}">> temp.txt
          echo "secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP: ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}">> temp.txt
          echo "secrets.AZURE_KEY_VAULT_NAME: ${{secrets.AZURE_KEY_VAULT_NAME}}">> temp.txt
          echo "secrets.AZURE_APP_INSIGHTS_NAME: ${{secrets.AZURE_APP_INSIGHTS_NAME}}">> temp.txt
          echo "secrets.AZURE_DB_SERVER_NAME: ${{secrets.AZURE_DB_SERVER_NAME}}">> temp.txt
          echo "secrets.AZURE_DB_NAME: ${{secrets.AZURE_DB_NAME}}">> temp.txt
          echo "steps.vars.outputs.DB_NOT_INITIALIZED: ${{steps.vars.outputs.DB_NOT_INITIALIZED}}">> temp.txt
          echo "steps.vars.outputs.DB_ADMIN_NAME: ${{steps.vars.outputs.DB_ADMIN_NAME}}">> temp.txt
          echo "steps.vars.outputs.DB_ADMIN_PASSWORD: ${{steps.vars.outputs.DB_ADMIN_PASSWORD}}">> temp.txt
          echo "steps.vars.outputs.DB_APP_USER_NAME: ${{steps.vars.outputs.DB_APP_USER_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}}">> temp.txt
          echo "dbUserPassword=' '">> temp.txt
          echo "secrets.AZURE_SPRING_SERVICE_NAME: ${{secrets.AZURE_SPRING_SERVICE_NAME}} ">> temp.txt
          echo "secrets.AZURE_APP_NAME: ${{secrets.AZURE_APP_NAME}}">> temp.txt
          echo "secrets.AZURE_APP_PORT: ${{secrets.AZURE_APP_PORT}}">> temp.txt
          echo "steps.vars.outputs.DEPLOYMENT_CLIENT_IP: ${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}}">> temp.txt

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3.11
      - name: Deploy Azure resources
        run: |
          cd ./templates
          az bicep build --file ./spring-apps.bicep

          ls -la

          az deployment group create --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --template-file ./spring-apps.json \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                     logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}  \
                                     logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} \
                                     keyVaultName=${{secrets.AZURE_KEY_VAULT_NAME}}  \
                                     appInsightsName=${{secrets.AZURE_APP_INSIGHTS_NAME}}  \
                                     dbServerName=${{secrets.AZURE_DB_SERVER_NAME}} \
                                     dbName=${{secrets.AZURE_DB_NAME}} \
                                     createDB=${{steps.vars.outputs.DB_NOT_INITIALIZED}} \
                                     dbAdminName=${{steps.vars.outputs.DB_ADMIN_NAME}} \
                                     dbAdminPassword=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} \
                                     dbUserName=${{steps.vars.outputs.DB_APP_USER_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}} \
                                     dbUserPassword="" \
                                     springAppsServiceName=${{secrets.AZURE_SPRING_SERVICE_NAME}} \
                                     appName=${{secrets.AZURE_APP_NAME}} \
                                     appPort=${{secrets.AZURE_APP_PORT}} \
                                     clientIPAddress=${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}}
      
      #Debug: - name: Setup tmate session
      #         uses: mxschmitt/action-tmate@v3.11
